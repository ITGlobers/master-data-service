# To really understand GraphQL, go to https://graphql.org/learn/

# It is necessary to generate input types for creating books
# ref: http://graphql.org/graphql-js/mutations-and-input-types/

type Fields {
  key: String
  value: String
}

input FieldsInput {
  key: String
  value: String
}

type Document {
  fields: [Fields]
}

type DocumentNoCache {
  documents: [Document]
  pagination: Paginator
}

type Paginator {
  page: Int
  pageSize: Int
  total: Int
}

input DocumentInput{
  fields: [FieldsInput]
}

type DocumentResponse {
  Id: String
  Href: String
  DocumentId: String
}

type DocumentResponseUpdate {
  DocumentId: String
}

type Query {
  DocumentsNoCache(
    acronym: String
    schema: String
    fields: [String]
    where: String
    sort: String
    pageSize: Int
    page: Int
    isExternal: Boolean
  ): DocumentNoCache @cacheControl(scope: PUBLIC, maxAge: ZERO)
  GetDocument(
    acronym: String
    id: String
    fields: [String]
    isExternal: Boolean
  ) : Document
}

type Mutation {
  CreateDocument(
    acronym: String!
    document: DocumentInput
    schema: String
    isExternal: Boolean
  ): DocumentResponse @cacheControl(scope: PUBLIC, maxAge: ZERO)

  UpdateDocument(
    acronym: String!
    id: ID!
    document: DocumentInput
    schema: String
    isExternal: Boolean
  ): DocumentResponseUpdate @cacheControl(scope: PUBLIC, maxAge: ZERO)

  DeleteDocument(
    acronym: String!
    documentId: String!
    isExternal: Boolean
  ): DocumentResponseUpdate @cacheControl(scope: PUBLIC, maxAge: ZERO)
}
